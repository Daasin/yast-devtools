#! /bin/bash
# mvidner@suse.cz, 2005-03-17
# recreate prefix installation of yast
set -o errexit

# the prefix
: ${PREFIX=$HOME/pfx}
USAGE=false
RESOLVE_DEPS=false
NETWORK=true
AUTORECONF=true
DIRECTORY_CHECK=true
SKIP_RECENT=false
YAST=true
while getopts hdnaCcDsYp: FLAG; do
    case $FLAG in
	h) USAGE=true;;
	d) RESOLVE_DEPS=true;;
	n) NETWORK=false;;
	a) AUTORECONF=false;;
	C) CACHE=-C;;
	c) CACHE=--cache-file=`pwd`/common-config.cache;;
	D) DIRECTORY_CHECK=false;;
	s) SKIP_RECENT=true;;
	Y) YAST=false;;
	p) PREFIX="$OPTARG";;
	*) USAGE=true; RC=1;;
    esac
done
shift $((OPTIND-1))

export PREFIX

if $USAGE; then
    echo "Usage:"
    echo " -h  Help"
    echo " -d  also do Dependent modules"
    echo " -n  no Network, do not update"
    echo " -a  no Autoreconf"
    echo " -C  autoconf Cache"
    echo " -c  global autoconf Cache"
    echo " -D  don't check the Directory"
    echo " -s  Skip recently visited modules"
    echo " -Y  non-Yast mode"
    echo " -p <prefix> use a prefix different from ~/pfx"
    exit $RC
fi

#check that we are  in the right directory: .../trunk or .../branches/$B
if $DIRECTORY_CHECK; then
    if ! test -f extra-packages; then
	echo "Not in the right directory. extra-packages not seen."
	exit 1
    fi
fi

# distributed make; can just use "make" instead
for MAKE in dmake make false; do
    type $MAKE >/dev/null 2>/dev/null && break
done
if [ $MAKE = false ]; then
    echo make is missing
    exit 1
fi

# $1 package directory
# configure arguments are take from MODULE_ARGUMENTS_$1
function build_module() {
    local MODULE="$1"; shift
    if $SKIP_RECENT; then
	T=$(mktemp /tmp/skip_recent.XXXXXX) || exit
	touch -d '12 hours ago' $T
	BYE=0
	test "$MODULE"/.recreated -nt $T && BYE=1
	rm $T
	if [ "$BYE" = 1 ]; then
	    echo "Module $MODULE was recently recreated, skipping"
	    return
	fi
    fi
    $NETWORK && condup "$MODULE"
    pushd "$MODULE"

    if $AUTORECONF || ! test -x ./configure; then
	if $YAST; then
	    if [ "$MODULE" = devtools ]; then
		local DTPATH="./devtools/bin"
		local BOOTSTRAP="--bootstrap ./devtools/admin"
		pfx $DTPATH/y2autoconf $BOOTSTRAP
		pfx $DTPATH/y2automake $BOOTSTRAP
		cat ./devtools/admin/aclocal/*.m4 > acinclude.m4
	    else
		pfx y2tool y2autoconf
		pfx y2tool y2automake
	    fi
	fi
	pfx autoreconf -v --force --install --include=$PREFIX/share/aclocal
    fi

    if [ -x ./config.status ]; then
	pfx ./config.status --recheck
	pfx ./config.status
    else
	local MODULE_ARGUMENTS_r=`echo MODULE_ARGUMENTS_$MODULE | tr - _`
	# if no MODULE_ARGUMENTS_foo are given, assume $PFX
	# pfx: pick up prefixed pkg-config
	# pfx ./configure $CACHE "${MODULE_ARGUMENTS_foo[@]-$PFX}"
	eval pfx ./configure \$CACHE "\"\${${MODULE_ARGUMENTS_r}[@]-\$PFX}\""
    fi
    pfx $MAKE
    pfx make install

    touch .recreated
    popd
}

# helper variables
PFX="--prefix=$PREFIX"
CFLAGS="CXXFLAGS=-O0 -g3"
WCFLAGS="CXXFLAGS=-O0 -g3 -W"
FILLUPDIR='--with-fillupdir=$(prefix)/var/adm/fillup-templates'

# $1 package directory
# rest: configure arguments
function module() {
    local MODULE="$1"; shift
    local MODULE_ARGUMENTS_r=`echo MODULE_ARGUMENTS_$MODULE | tr - _`
    eval "$MODULE_ARGUMENTS_r=(\"\$@\")"
}

module devtools		"$PFX"
module liby2util	"$PFX" "$WCFLAGS"
module core		"$PFX" "$WCFLAGS"
module hardware-detection	"$PFX" "$WCFLAGS"
module packagemanager	"$PFX" "$FILLUPDIR" "$CFLAGS"
module testsuite	"$PFX"
module pkg-bindings	"$PFX" "$CFLAGS"
module yast2		"$PFX" "$FILLUPDIR" '--sbindir=$(prefix)/sbin' '--sysconfdir=$(prefix)/etc'

module ncurses		"$PFX" "$CFLAGS"
module qt		"$PFX" "$CFLAGS"

module scanner		"$PFX"
module xml		"$PFX" "$CFLAGS"
module tune		"$PFX"
module mail		"$PFX"
module nfs-client	"$PFX"
module nfs-server	"$PFX"
module tftp-server	"$PFX"

module country		"$PFX"

module mouse		"$PFX"

## yast2-deps says installation needs xml
## but apparently that's not the case
module installation	"$PFX" "$FILLUPDIR"
module firewall		"$PFX"

module perl-bindings	"$PFX" "$CFLAGS"

module storage		"$PFX" "$CFLAGS" '--sbindir=$(prefix)/sbin'
module bootloader	"$PFX" "$FILLUPDIR"

module x11		"$PFX" "$CFLAGS"
module packager		"$PFX"
module update		"$PFX"
module transfer		"$PFX" "$CFLAGS"
module autoinstallation	"$PFX" "$FILLUPDIR" '--sysconfdir=$(prefix)/etc'

module network		"$PFX"

## for packaging mail: users
module pam		"$PFX"
module security		"$PFX"
module ldap-client	"$PFX" "$FILLUPDIR"
module users		"$PFX" "$CFLAGS"

module ldap		"$PFX" "$CFLAGS"
module dns-server	"$PFX"

module schema		"$PFX"

module runlevel		"$PFX"
module firstboot	"$PFX" "$FILLUPDIR" '--sysconfdir=$(prefix)/etc'

if $RESOLVE_DEPS; then
    echo >&2 "Getting dependencies"
    MODULES=`yast2-deps $1 | tsort | tac`
    test ! -f .yast2-deps-failed
else
    MODULES="$@"
fi

echo >&2 "$MODULES"
set -x
for M in $MODULES; do
    build_module $M
done

#!/usr/bin/perl -w
#
# Insert special install target for header files into all Makefile.am
# Replaces old install target between tags
#
# <INSTALL-HEADER-TARGET>
# ...
# </INSTALL-HEADER-TARGET>
#
#
# Usage:
#	change_cvs_root [-dv] <base_dir> [<base_dir> ...]
#
#	-v	verbose
#	-d	debug
#
# Author: Stefan Hundhammer <sh@suse.de>

use strict;
use English;
use Getopt::Std;
use vars qw( $opt_v $opt_d );


# Global variables.

my $verbose		= 1;
my $debug		= 0;


# Forward declarations.

sub main();


# Call the main function and exit.
# DO NOT enter any other code outside a sub -
# any variables would otherwise be global.


main();
exit 0;


#-----------------------------------------------------------------------------


sub main()
{
    my $base_dir;


    # Extract command line options.
    # This will set a variable opt_? for any option,
    # e.g. opt_v if option '-v' is passed on the command line.

    getopts('vd');

    $verbose	= 1 if $opt_v;
    $debug	= 1 if $opt_d;

    # Check for specified directories (must have at least one)
    # Caution: Perl does not count ARGV[0] (the program name)!

    usage() unless $#ARGV >= 0;


    # Process all specified base directories

    foreach $base_dir ( @ARGV )
    {
	logf ( "*** Processing base directory $base_dir" );
	change_recursive ( $base_dir );
    }
}


#-----------------------------------------------------------------------------

# Recursively process any CVS directory from the specified base directory on.
#
# Parameters:
#	base directory

sub change_recursive ()
{
    my ( $base_dir ) = @_;
    my $makefile_am;

    foreach $makefile_am ( `find $base_dir -name "Makefile.am" -print` )
    {
	chomp $makefile_am;	# Remove trailing newline

	if ( `grep "pkginclude_HEADERS" $makefile_am` )
	{
	    change_single ( $makefile_am );
	}
    }
}


#-----------------------------------------------------------------------------


# Process one single file
#
# Parameters:
#	file name to process ( */Makefile.am )


sub change_single ()
{
    my ( $src ) = @_;
    my $tmp = $src . ".tmp";
    my $line;

    open ( SRC, $src	  ) or die "WARNING: Can't open $src";
    open ( TMP,  "> $tmp" ) or die "WARNING: Can't open $tmp";

    logf ( $src );

    while ( $line = <SRC> )
    {
	if ( $line =~ '^\s*#\s*<INSTALL-HEADER-TARGET>' )
	{
	    deb( "Removing old install target" );

	    while (   ( $line = <SRC> ) && 
		    ! ( $line =~ '^\s*#\s*</INSTALL-HEADER-TARGET>' ) )
	    { 
		print $line if ( $debug );
	    }
	}
	else
	{
	    print TMP $line;
	}
    }


    # Append new install header target

    print TMP <<'EOF';
#<INSTALL-HEADER-TARGET>

# Automatically inserted by insert_install_target
# DO NOT REMOVE THE TAGS!

# Install header files only if different to version already installed -
# prevent unnecessary installations to keep make dependency changes
# and thus rebuilds for dependent packages as low as possible.

install-pkgincludeHEADERS: $(pkginclude_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(pkgincludedir)
	@list='$(pkginclude_HEADERS)';							\
	for p in $$list; do								\
		if test -f "$$p"; then d= ; else d="$(srcdir)/"; fi; 			\
		if ! cmp -s $$d$$p $(DESTDIR)$(pkgincludedir)/$$p; then			\
			echo " $(INSTALL_DATA) $$d$$p $(DESTDIR)$(pkgincludedir)/$$p";	\
			$(INSTALL_DATA) $$d$$p $(DESTDIR)$(pkgincludedir)/$$p;		\
	  	fi									\
	done

#</INSTALL-HEADER-TARGET>
EOF


    close ( TMP );
    close ( SRC );

    if ( ! $debug )
    {
	rename ( $src, $src . ".old" );
	rename ( $tmp, $src ) or warning ( "Can't rename $tmp to $src" );
    }
}


#-----------------------------------------------------------------------------


# Log a message to stdout if verbose mode is set
# (command line option '-v').
#
# Parameters:
#	Messages to write (any number).

sub logf()
{
    my $msg;

    if ( $verbose )
    {
	foreach $msg ( @_ )
	{
	    print $msg . " ";
	}

	print "\n";
    }
}


#-----------------------------------------------------------------------------


# Log a debugging message to stdout if debug mode is set
# (command line option '-d').
#
# Parameters:
#	Messages to write (any number).

sub deb()
{
    my $msg;

    if ( $debug )
    {
	print '   DEB> ';

	foreach $msg ( @_ )
	{
	    print $msg . " ";
	}

	print "\n";
    }
}


#-----------------------------------------------------------------------------


# Print usage message and abort program.
#
# Parameters:
#	---

sub usage()
{
    die "Usage: $0 [-vd]";
}



# EOF

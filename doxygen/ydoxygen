#! /usr/bin/perl -w
# $Id$
#
# Run doxygen with a default configuration file for YaST
# but allow overriding some values


=head1 NAME

ydoxygen - Runs doxygen as configured for YaST.

=head1 SYNOPSIS

 ydoxygen -h|--help|--man
 ydoxygen [-d] [-t <template>] [<param>=<value> ...]

=head1 OPTIONS AND ARGUMENTS

=over

=item B<-h>

Show this help screen

=item B<-t> I<file>, B<--template>=I<file>

Use a template file different from <y2datadir>/devtools/Doxyfile
Output files are placed to directory I<dir>

=item B<-d>, B<--debug>

Show what is substituted.
Write doxygen.log and doxygen.conf.

=item I<param>=I<value>

Replace a parameter in the template configuration file.
Setting PROJECT_NAME also sets GENERATE_TAGFILE to $PROJECT_NAME.tag

=back

=cut

use strict;

use Pod::Usage;
use Getopt::Long;

my $help = 0;
my $man = 0;
my $y2datadir = "/usr/share/YaST2/data";
my $template = "$y2datadir/devtools/Doxyfile";
my $debug = 0;

# parse command line
# - options
Getopt::Long::Configure ("bundling");
GetOptions (
	    "help|h" => \$help,
	    "man" => \$man,

	    "template|t=s" => \$template,
	    "debug|d" => \$debug,
	   ) or pod2usage (2);
pod2usage (1) if $help;
pod2usage (-exitstatus => 0, -verbose => 2) if $man;

# - arguments
my %replacements = ();
foreach (@ARGV)
{
    my ($param, $value) = split ('=', $_, 2);
    $replacements{$param} = $value;
    if ($param eq "PROJECT_NAME")
    {
	$replacements{"GENERATE_TAGFILE"} = "$value.tag";
    }
    print "'$param'='$value'\n" if $debug;
}

# open input file
open (IN, "<$template") or die "Cannot open $template: $!";

# open output - pipe
my $run_doxygen = "|doxygen -";
if ($debug)
{
    $run_doxygen = "|tee doxygen.conf ". $run_doxygen;
}
open (OUT, $run_doxygen) or die;

# $_ holds the whole definitioin of a parameter
# that may be split over multiple lines

# a single physical line
my $single;

# process input, passing it through, substituting what we want
while (defined ($single = <IN>))
{
    $_ .= $single;
    # check if this line continues (by trying to cut the continuation mark off)
    if (s/\\$//)
    {
	next;
    }

    if (m/^([A-Z_]+)(\s*)=\s*(.*)\n/)
    {
	my ($param, $ws, $value) = ($1, $2, $3);
	if (defined ($replacements{$param}))
	{
	    $value = $replacements{$param};
	}

	$_ = "$param$ws= $value\n";
    }
    print OUT $_;
    $_ = "";			# this line does not continue
}

close(OUT);
close(IN);
